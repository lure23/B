/*
* Helper for 'build.rs'
*
* Processes the 'pins.toml', injecting its contents - as a Rust snippet - into the given path.
*/
use anyhow::{Context, Result};

// TOML objects
//
#[derive(Debug, serde::Deserialize)]
struct PinsToml {
    generate: String,
    boards: std::collections::HashMap<String,Board>
}

#[derive(Debug, serde::Deserialize)]
#[allow(non_snake_case)]
struct Board {
    SDA: u32,
    SCL: u32,
    PWR_EN: u32,
    INT: u32,
}

#[allow(non_snake_case)]
fn process_pins(toml: &str, board_id: &str) -> Result<()> {
    let c: PinsToml = toml::from_str(toml)?;

    let board = c.boards.get(board_id).with_context(
        || format!("No section '[boards.{}]' found in 'pins.toml'", board_id)
    )?;

    let fn_ = &c.generate;
    assert!(fn_.len() > 0);

    // unpack, because "field access not supported [...] in a format string"
    let (SDA, SCL, PWR_EN, INT) = (board.SDA, board.SCL, board.PWR_EN, board.INT);

    let contents = {
        format!(r#"// Generated by 'build.rs'
// DO NOT MAKE CHANGES HERE; THEY WILL GET LOST. Instead, edit 'pins.toml' and rebuild.
//
macro_rules! pins {{
    ($peripherals:ident) => {{{{
        // {board_id}
        Pins {{
            SDA: $peripherals.GPIO{SDA}.into(),
            SCL: $peripherals.GPIO{SCL}.into(),
            PWR_EN: $peripherals.GPIO{PWR_EN}.into(),
            //INT: $peripherals.GPIO{INT}.into(),
        }}
    }}}}
}}
"#)
    };

    std::fs::write(fn_, contents).with_context(
        || format!("Unable to write {fn_}")
    )?;

    Ok(())
}
